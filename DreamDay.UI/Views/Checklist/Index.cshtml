@model DreamDay.Models.ViewModels.WeddingChecklistViewModel
@{
    ViewData["Title"] = $"Checklist for {Model.WeddingTitle ?? "Wedding"}";
    var weddingId = Model.WeddingId; // For convenience in forms
}

@if (!string.IsNullOrEmpty(Model.WeddingTitle))
{
    <nav aria-label="breadcrumb">
        <ol class="breadcrumb">
            <li class="breadcrumb-item"><a asp-controller="Wedding" asp-action="Details" asp-route-id="@Model.WeddingId">Wedding: @Model.WeddingTitle</a></li>
            <li class="breadcrumb-item active" aria-current="page">Manage Checklist</li>
        </ol>
    </nav>
}


<h2>@ViewData["Title"]</h2>
<hr />

@if (TempData["SuccessMessage"] != null)
{
    <div class="alert alert-success alert-dismissible fade show" role="alert">
        @TempData["SuccessMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}
@if (TempData["ErrorMessage"] != null)
{
    <div class="alert alert-danger alert-dismissible fade show" role="alert">
        @TempData["ErrorMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}

<div class="card mb-4 shadow-sm">
    <div class="card-header bg-primary text-white">
        <h5 class="mb-0"><i class="bi bi-plus-circle-fill me-2"></i>Add New Task</h5>
    </div>
    <div class="card-body">
        @* Make sure the form submits to the ChecklistController's AddTask action *@
        <form asp-controller="Checklist" asp-action="AddTask" method="post">
            @Html.AntiForgeryToken()
            @* NewTask is a property on WeddingChecklistViewModel. Its WeddingId needs to be set. *@
            <input type="hidden" asp-for="NewTask.WeddingId" value="@Model.WeddingId" />

            @* This summary is for the NewTask sub-model.
               You might need custom validation handling if only NewTask has errors
               and you want to preserve the main Tasks list.
               For now, using ModelOnly will show general errors.
            *@
            <div asp-validation-summary="ModelOnly" class="text-danger mb-2"></div>


            <div class="row g-3 align-items-end">
                <div class="col-md-5">
                    <label asp-for="NewTask.Title" class="form-label"></label>
                    <input asp-for="NewTask.Title" class="form-control form-control-sm" />
                    <span asp-validation-for="NewTask.Title" class="text-danger"></span>
                </div>
                <div class="col-md-4">
                    <label asp-for="NewTask.Description" class="form-label"></label>
                    <input asp-for="NewTask.Description" class="form-control form-control-sm" />
                    <span asp-validation-for="NewTask.Description" class="text-danger"></span>
                </div>
                <div class="col-md-2">
                    <label asp-for="NewTask.DueDate" class="form-label"></label>
                    <input asp-for="NewTask.DueDate" class="form-control form-control-sm" type="date" />
                    <span asp-validation-for="NewTask.DueDate" class="text-danger"></span>
                </div>
                <div class="col-md-1">
                    <button type="submit" class="btn btn-sm btn-primary w-100"><i class="bi bi-plus-lg"></i> Add</button>
                </div>
            </div>
        </form>
    </div>
</div>


<h4 class="mt-4 mb-3"><i class="bi bi-list-check"></i>Current Tasks (@Model.Tasks.Count)</h4>
@if (!Model.Tasks.Any())
{
    <div class="alert alert-info">No tasks added yet. Use the form above to add your first task!</div>
}
else
{
    <div class="list-group shadow-sm">
        @foreach (var task in Model.Tasks)
        {
            <div class="list-group-item d-flex justify-content-between align-items-center task-item @(task.IsCompleted ? "task-completed" : "")" data-task-id="@task.Id">
                <div class="form-check flex-grow-1">
                    <input class="form-check-input task-checkbox" type="checkbox" value="" id="task-@task.Id" data-task-id="@task.Id" @(task.IsCompleted ? "checked" : "")>
                    <label class="form-check-label @(task.IsCompleted ? "text-decoration-line-through" : "")" for="task-@task.Id">
                        <strong>@task.Title</strong>
                        @if (!string.IsNullOrWhiteSpace(task.Description))
                        {
                            <small class="d-block text-muted">@task.Description</small>
                        }
                        <small class="d-block text-info">Due: @task.DueDate.ToString("dd MMM yyyy")</small>
                    </label>
                </div>
                <div class="ms-2">
                    @* Edit Task Link (Placeholder - you would need an EditTask action and view) *@
                    @* <a asp-controller="Checklist" asp-action="EditTask" asp-route-taskId="@task.Id" asp-route-weddingId="@Model.WeddingId" class="btn btn-sm btn-outline-secondary me-1" title="Edit Task"><i class="bi bi-pencil"></i></a> *@

                    @* Delete Task Form *@
                    <form asp-controller="Checklist" asp-action="DeleteTask" asp-route-taskId="@task.Id" method="post" style="display:inline;" onsubmit="return confirm('Are you sure you want to delete this task: \'@task.Title\'?');">
                        @Html.AntiForgeryToken()
                        <input type="hidden" name="weddingId" value="@Model.WeddingId" /> @* Pass weddingId for redirect *@
                        <button type="submit" class="btn btn-sm btn-outline-danger" title="Delete Task"><i class="bi bi-trash"></i></button>
                    </form>
                </div>
            </div>
        }
    </div>
    <p class="text-muted mt-2">
        You have @Model.Tasks.Count(t => !t.IsCompleted) pending task(s) out of @Model.Tasks.Count total tasks.
    </p>
}

<div class="mt-4">
    <a asp-controller="Wedding" asp-action="Details" asp-route-id="@Model.WeddingId" class="btn btn-outline-secondary">
        <i class="bi bi-arrow-left-circle me-2"></i>Back to Wedding Details
    </a>
</div>


@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const taskCheckboxes = document.querySelectorAll('.task-checkbox');
            const forgeryTokenInput = document.querySelector('input[name="__RequestVerificationToken"]'); // Get token from one of the forms

            taskCheckboxes.forEach(checkbox => {
                checkbox.addEventListener('change', function () {
                    const taskId = this.dataset.taskId;
                    const isCompleted = this.checked;
                    const taskItemDiv = this.closest('.task-item');
                    const label = this.closest('.form-check').querySelector('.form-check-label');

                    if (!forgeryTokenInput) {
                        console.error('Anti-forgery token not found.');
                        alert('Error: Security token not found. Please refresh the page.');
                        return;
                    }
                    const token = forgeryTokenInput.value;

                    fetch('@Url.Action("UpdateTaskStatus", "Checklist")', { // Use Url.Action for correct path
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/x-www-form-urlencoded',
                            'RequestVerificationToken': token
                        },
                        body: new URLSearchParams({ // Send data as x-www-form-urlencoded
                            'taskId': taskId,
                            'isCompleted': isCompleted
                        })
                    })
                    .then(response => {
                        if (!response.ok) {
                            // Try to get error message if response is not ok but parsable as JSON
                            return response.json().then(err => Promise.reject(err));
                        }
                        return response.json();
                    })
                    .then(data => {
                        if (data.success) {
                            if (isCompleted) {
                                taskItemDiv.classList.add('task-completed');
                                label.classList.add('text-decoration-line-through');
                            } else {
                                taskItemDiv.classList.remove('task-completed');
                                label.classList.remove('text-decoration-line-through');
                            }
                            // console.log(data.message); // Optional success feedback
                        } else {
                            this.checked = !isCompleted; // Revert checkbox
                            alert('Error updating task: ' + (data.message || 'Unknown error'));
                        }
                    })
                    .catch(error => {
                        this.checked = !isCompleted; // Revert on error
                        console.error('Error details:', error);
                        alert('An error occurred while updating task status. ' + (error.message || 'Check console for details.'));
                    });
                });
            });
        });
    </script>
}

@section Styles {
    <style>
        .task-completed {
            background-color: #f0f0f0; /* Lighter than previous green for subtlety */
            opacity: 0.75;
        }

            .task-completed .form-check-label strong,
            .task-completed .form-check-label small {
                /* color: #6c757d; */ /* No need to change text color if using line-through */
            }

        .list-group-item small.d-block {
            font-size: 0.85em;
        }

        .form-check-label {
            cursor: pointer; /* Indicate label is clickable for checkbox */
        }

        .task-item .btn-sm {
            padding: 0.15rem 0.4rem; /* Smaller buttons */
            font-size: 0.75rem;
        }
    </style>
}